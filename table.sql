DROP TABLE IF EXISTS OPEN;
DROP TABLE IF EXISTS RESERVATION;
DROP TABLE IF EXISTS STUDENT;
DROP TABLE IF EXISTS MEMBER;

CREATE TABLE MEMBER (
  ID SERIAL PRIMARY KEY,
--   LINE_ID VARCHAR(128),
  NAME VARCHAR(64) NOT NULL,
  NAME_KANA VARCHAR(64) NOT NULL,
  ZIP VARCHAR(10) NOT NULL,
  PREF INT NOT NULL,
  ADDR VARCHAR(256) NOT NULL,
  TEL VARCHAR(16) NOT NULL,
  MAIL VARCHAR(64) NOT NULL,
  PASSWD VARCHAR(512) NOT NULL
);

CREATE TABLE STUDENT (
  ID SERIAL PRIMARY KEY,
  GUARDIAN INT NOT NULL,
  NAME VARCHAR(64) NOT NULL,
  NICKNAME VARCHAR(64),
  BIRTHDAY DATE,
  FOREIGN KEY (GUARDIAN) REFERENCES MEMBER(ID)
);

CREATE TABLE RESERVATION (
  ID SERIAL PRIMARY KEY,
  START_DATETIME TIMESTAMP WITH TIME ZONE NOT NULL,
  END_DATETIME TIMESTAMP WITH TIME ZONE NOT NULL,
  STUDENT_ID INT NOT NULL,
  PRICE INT NOT NULL,
  ATTENDED INT DEFAULT 0,
  ADD_TO_CALENDER BOOLEAN DEFAULT FALSE,
  PAID BOOLEAN DEFAULT FALSE,
  FOREIGN KEY (STUDENT_ID) REFERENCES STUDENT(ID)
);

CREATE TABLE OPEN (
  START_DATETIME TIMESTAMP WITH TIME ZONE NULL,
  END_DATETIME TIMESTAMP WITH TIME ZONE NOT NULL
);

CREATE TABLE MOKUMOKU (
  IS_VACANT BOOLEAN
);

-- INSERT INTO MEMBER (NAME, MAIL, PASSWD) VALUES ('松本早紀', 'hoge@kinokodata.net', 'passwd');

-- INSERT INTO STUDENT (GUARDIAN, NAME) VALUES (1, '松本ことね');

-- INSERT INTO RESERVATION (START_DATETIME, END_DATETIME, STUDENT_ID, PRICE) VALUES ('2019-3-10 15:00', '2019-3-10 16:30', 1, 2000);

-- INSERT INTO OPEN (START_DATETIME, END_DATETIME) VALUES
-- ('2019-05-11T09:30:00+09:00', '2019-05-11 11:00:00+09:00'),
-- ('2019-05-12T09:30:00+09:00', '2019-05-12 15:30:00+09:00'),
-- ('2019-05-26T09:30:00+09:00', '2019-05-26 15:30:00+09:00'),
-- ('2019-05-14T15:30:00+09:00', '2019-05-14 18:00:00+09:00'),
-- ('2019-05-15T15:30:00+09:00', '2019-05-15 18:00:00+09:00'),
-- ('2019-05-16T15:30:00+09:00', '2019-05-16 18:00:00+09:00'),
-- ('2019-05-11T15:30:00+09:00', '2019-05-11 18:00:00+09:00');
