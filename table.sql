DROP TABLE IF EXISTS RESERVATION;
DROP TABLE IF EXISTS STUDENT;
DROP TABLE IF EXISTS MEMBER;

CREATE TABLE MEMBER (
  ID SERIAL PRIMARY KEY,
--   LINE_ID VARCHAR(128),
  NAME VARCHAR(64) NOT NULL,
  NAME_KANA VARCHAR(64) NOT NULL,
  ZIP VARCHAR(10) NOT NULL,
  PREF INT NOT NULL,
  ADDR VARCHAR(256) NOT NULL,
  TEL1 VARCHAR(16),
  TEL2 VARCHAR(16),
  MAIL VARCHAR(64)
);

CREATE TABLE STUDENT (
  ID SERIAL PRIMARY KEY,
  GUARDIAN_ID INT NOT NULL,
--   NAME VARCHAR(64) NOT NULL,
--   NICKNAME VARCHAR(64),
  MEMBER_ID INT NOT NULL,
  BIRTHDAY TIMESTAMP WITH TIME ZONE,
  NOTICE VARCHAR(16),

  FOREIGN KEY (GUARDIAN_ID) REFERENCES MEMBER(ID),
  FOREIGN KEY (MEMBER_ID) REFERENCES MEMBER(ID)
);

CREATE TABLE COURSE (
    ID SERIAL PRIMARY KEY,
    NAME VARCHAR(128) NOT NULL,
    PRICE INT NOT NULL,
    TARGET_MIN INT NOT NULL,
    TARGET_MAX INT NOT NULL,
    PERIOD INT NOT NULL,
    AVAILABLE BOOLEAN NOT NULL DEFAULT TRUE,
    MEMO TEXT
);

CREATE TABLE VISIT (
    ID SERIAL PRIMARY KEY,
    STUDENT_ID INT NOT NULL,
    JOIN_OR_LEAVE VARCHAR(16),
    TIME TIMESTAMP WITH TIME ZONE NOT NULL,
    COURSE_ID INT NOT NULL,

    FOREIGN KEY (STUDENT_ID) REFERENCES STUDENT(ID),
    FOREIGN KEY (COURSE_ID) REFERENCES COURSE(ID)
);

CREATE TABLE RESERVATION (
  ID SERIAL PRIMARY KEY,
  START_DATETIME TIMESTAMP WITH TIME ZONE NOT NULL,
  END_DATETIME TIMESTAMP WITH TIME ZONE NOT NULL,
  STUDENT_ID INT NOT NULL,
  PRICE INT NOT NULL,
  ATTENDED INT DEFAULT 0,
  ADD_TO_CALENDER BOOLEAN DEFAULT FALSE,
  PAID BOOLEAN DEFAULT FALSE,
  FOREIGN KEY (STUDENT_ID) REFERENCES STUDENT(ID)
);

INSERT INTO COURSE (NAME, PRICE, TARGET_MIN, TARGET_MAX, PERIOD, MEMO) VALUES
    ('もくもく会', 300, 7, 120, 180, ''),
    ('もくもく会（初回無料）', 0, 7, 120, 180, '初回無料キャンペーン');

-- INSERT INTO MEMBER (NAME, MAIL, PASSWD) VALUES ('松本早紀', 'hoge@kinokodata.net', 'passwd');

-- INSERT INTO STUDENT (GUARDIAN, NAME) VALUES (1, '松本ことね');

-- INSERT INTO RESERVATION (START_DATETIME, END_DATETIME, STUDENT_ID, PRICE) VALUES ('2019-3-10 15:00', '2019-3-10 16:30', 1, 2000);

-- INSERT INTO OPEN (START_DATETIME, END_DATETIME) VALUES
-- ('2019-05-11T09:30:00+09:00', '2019-05-11 11:00:00+09:00'),
-- ('2019-05-12T09:30:00+09:00', '2019-05-12 15:30:00+09:00'),
-- ('2019-05-26T09:30:00+09:00', '2019-05-26 15:30:00+09:00'),
-- ('2019-05-14T15:30:00+09:00', '2019-05-14 18:00:00+09:00'),
-- ('2019-05-15T15:30:00+09:00', '2019-05-15 18:00:00+09:00'),
-- ('2019-05-16T15:30:00+09:00', '2019-05-16 18:00:00+09:00'),
-- ('2019-05-11T15:30:00+09:00', '2019-05-11 18:00:00+09:00');
